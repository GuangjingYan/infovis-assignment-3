{"version":3,"sources":["components/AxisView.js","utils/tnc.js","utils/colormap.js","components/ProjectionView.js","components/LegendView.js","App.js","index.js"],"names":["AxisView","props","attrPosition","center","radius","margin","width","setCircleUpdate","AxisSvg","useRef","svgSize","drag","d3","on","e","name","this","getAttribute","select","style","deltaX","x","tan","y","subject","Math","cos","atan","sin","updateCircle","updateText","updateLine","preState","selectAll","data","join","attr","d","i","call","_","textX","textY","text","lineSvg","lineData","map","useEffect","arcSvg","current","append","arcGenerator","innerRadius","outerRadius","startAngle","endAngle","PI","drawBigCircle","drawCircle","drawText","drawLine","ref","height","knn","k","knnArr","length","j","dist","pow","push","sqrt","sort","a","b","slice","colormap","trust","conti","powScale","exponent","aScale","domain","range","bScale","ProjectionView","xExtent","yExtent","newPosition","pointPosition","pointData","circleUpdate","pViewSvg","isUpdate","useState","checkVis","setCheckVis","updateData","pointX","pointY","forEach","updatePoint","xScale","yScale","transition","duration","drawPoint","voronoiSvg","delaunayPosition","tncValue","raw","emb","console","log","kSum","Array","fill","reduce","acc","curr","rawKnnArr","embKnnArr","rawKnn","embKnnSet","Set","has","embKnn","rawKnnSet","tnc","voronoi","from","render","renderCell","drawVoronoi","remove","onClick","LegendView","lViewSvg","svg","rectSvg","positionX","positionY","textSvg","App","angle","className","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aee44c32.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\nimport * as d3 from \"d3\";\n\nconst AxisView = (props) =>{\n  const { attrPosition, center, radius, margin, width, setCircleUpdate } = props;\n  \n  const AxisSvg = useRef(null);\n  const svgSize = margin * 2 + width;\n  let drag = d3.drag().on('drag',handleDrag).on('end',dragEnded);\n\n  useEffect(() =>{\n    drawBigCircle();\n    drawCircle();\n    drawText();\n    drawLine();\n  },[])\n\n  // drag handler\n  function handleDrag(e){\n    let name = this.getAttribute(\"class\");\n    d3.select(\".lineSvg\").select(`.${name}`).style('stroke',\"red\");\n    d3.select(\".textSvg\").select(`.${name}`).style('fill',\"red\");\n    d3.select(this).style(\"fill\",\"red\");\n    let deltaX = e.x - center;\n    let deltaY = e.y - center;\n    let tan = deltaY / deltaX;\n    if( deltaX >= 0) {\n      e.subject[0] = center + radius * Math.cos( Math.atan(tan) );\n      e.subject[1] = center + radius * Math.sin( Math.atan(tan) );\n    }\n    else {\n      e.subject[0] = center - radius * Math.cos( Math.atan(tan) );\n      e.subject[1] = center - radius * Math.sin( Math.atan(tan) );\n    }\n    updateCircle();\n    updateText();\n    updateLine();\n    setCircleUpdate(preState => !preState);\n  }\n\n  // dragend handler\n  function dragEnded(e){\n    d3.select(this).style(\"fill\",\"black\");\n    let name = this.getAttribute(\"class\");\n    d3.select(\".lineSvg\").select(`.${name}`).style('stroke',\"black\");\n    d3.select(\".textSvg\").select(`.${name}`).style('fill',\"black\");\n  }\n  \n  // draw star coordinate\n  function drawBigCircle()\n  {\n    const svg = d3.select(AxisSvg.current);\n    const arcSvg = svg.append(\"g\")\n                      .attr(\"transform\", `translate(${margin + radius},${radius + margin})`)\n                      .attr(\"class\", \"arcSvg\")\n\n    const arcGenerator = d3.arc()\n                          .innerRadius(radius)\n                          .outerRadius(radius)\n                          .startAngle(0)\n                          .endAngle(Math.PI * 2);\n\n    const path = arcSvg.append(\"path\")\n                    .attr(\"d\", arcGenerator)\n                    .attr(\"fill\", \"white\")\n                    .style(\"stroke\", \"grey\")\n                    .style(\"stroke-width\", \"3px\")\n                    .style(\"stroke-dasharray\", \"5,5\"); \n  }\n\n  // draw axis handle\n  function drawCircle()\n  {\n    const svg = d3.select(AxisSvg.current);\n    // set circles\n    const circleSvg = svg.append(\"g\")\n                        .attr(\"transform\", `translate(0,0)`)\n                        .attr(\"class\", \"circleSvg\")\n    updateCircle();\n  }\n\n  // draw axis\n  function drawLine()\n  {\n    const svg = d3.select(AxisSvg.current);\n    const lineSvg =  svg.append(\"g\")\n                        .attr(\"transform\", `translate(0,0)`)\n                        .attr(\"class\", \"lineSvg\")\n    updateLine();\n  }\n\n  // render attribute text\n  function drawText()\n  {\n    const svg = d3.select(AxisSvg.current);\n    const textSvg = svg.append(\"g\")\n                        .attr(\"transform\", `translate(0,0)`)\n                        .attr(\"class\", \"textSvg\")\n    updateText();\n  }\n  \n  // update axis handle\n  function updateCircle()\n  {\n    const circleSvg = d3.select(\".circleSvg\")\n    circleSvg.selectAll(\"circle\")\n        .data(attrPosition)\n        .join(\"circle\")\n        .attr(\"cx\", d => d[0])\n        .attr(\"cy\", d => d[1])\n        .attr(\"r\", 7)\n        .attr(\"fill\", \"black\")\n        .attr(\"class\", (d,i) => `attr${i}`)\n        .call(drag)\n        .on(\"mouseover\", function(d){\n          d3.select(this).style(\"fill\", \"red\");\n          let name = this.getAttribute(\"class\");\n          d3.select(\".lineSvg\").select(`.${name}`).style('stroke',\"red\");\n          d3.select(\".textSvg\").select(`.${name}`).style('fill',\"red\");\n         })\n        .on(\"mouseout\", function(d){\n          d3.select(this).style(\"fill\", \"black\");\n          let name = this.getAttribute(\"class\");\n          d3.select(\".lineSvg\").select(`.${name}`).style('stroke',\"black\");\n          d3.select(\".textSvg\").select(`.${name}`).style('fill',\"black\");\n         })\n  }\n\n  // update attribute text\n  function updateText()\n  {\n    const textSvg = d3.select(\".textSvg\");\n    textSvg.selectAll(\"text\")\n    .data(attrPosition)\n    .join(\"text\")\n    .attr(\"class\", (_,i) => `attr${i}`)\n    .attr(\"transform\",(d)=>{ \n      let textX = d[0];\n      let textY = d[1];\n      textX > center ? textX +=  20 : textX -= 80;\n      textY > center ? textY +=  20 : textY -= 20;\n      return `translate(${textX},${textY})`; \n    })\n    .text(d => d[2]);\n  }\n\n  // update axis\n  function updateLine()\n  {\n    const lineSvg = d3.select(\".lineSvg\");\n\n    const lineData = attrPosition.map(e => {\n      return[[center, center],[e[0],e[1]]];\n    })\n    lineSvg.selectAll(\"line\")\n         .data(lineData)\n         .join(\"line\")\n         .attr(\"x1\",d => d[0][0])\n         .attr(\"y1\",d => d[0][1])\n         .attr(\"x2\",d => d[1][0])\n         .attr(\"y2\",d => d[1][1])\n         .attr(\"class\",(_,i) => `attr${i}`)\n         .attr(\"stroke\", \"black\")\n         .style(\"stroke-width\", \"1px\");\n  }\n\n  return (\n\t\t<div>\n\t\t\t<svg ref={AxisSvg} width={svgSize} height={svgSize - margin}> \n\t\t\t</svg>\n\t\t</div>\n\t)\n\n}\n\nexport default AxisView;","// Implementation of the Trustworthiness & Continuity Metric\n\nfunction knn(data, k) {\n\tconst knnArr = [];\n\tfor(let i = 0; i < data.length; i++) {\n\t\tlet knn = []\n\t\tfor(let j = 0; j < data.length; j++) {\n\t\t\tlet dist = 0;\n\t\t\tfor (let k = 0; k < data[0].length; k++) {\n\t\t\t\tdist += Math.pow((data[i][k] - data[j][k]), 2);\n\t\t\t}\n\t\t\tknn.push([Math.sqrt(dist), j]);\n\t\t}\n\t\tknn.sort((a, b) => a[0] - b[0]);\n\t\tknn = knn.slice(1, k + 2).map(d => d[1]);\n\t\tknnArr.push(knn);\n\t}\n\treturn knnArr;\n}\n\nexport function tnc(raw, emb) {\n\tconst k = 10;\n\tconsole.log(raw, emb)\n\n\tconst kSum = Array(k).fill(0).reduce((acc, curr, i) => acc + i + 1, 0);\n\n\tconst rawKnnArr = knn(raw, k);\n\tconst embKnnArr = knn(emb, k);\n\n\tconst trustArr = rawKnnArr.map((rawKnn, i) => {\n\t\tconst embKnnSet = new Set(embKnnArr[i]);\n\t\tconst trust = rawKnn.reduce((acc, curr, i) => {\n\t\t\tif (embKnnSet.has(curr)) return acc + (k - i);\n\t\t\telse return acc;\n\t\t}, 0) / kSum;\n\t\treturn trust;\n\t});\n\tconst contiArr = embKnnArr.map((embKnn, i) => {\n\t\tconst rawKnnSet = new Set(rawKnnArr[i]);\n\t\tconst conti = embKnn.reduce((acc, curr, i) => {\n\t\t\tif (rawKnnSet.has(curr)) return acc + (k - i);\n\t\t\telse return acc;\n\t\t}, 0) / kSum;\n\t\treturn conti;\n\t});\n\n\treturn {\n\t\t\"trust\": trustArr,\n\t\t\"conti\": contiArr\n\t}\n}","// implementation of the CheckViz Colormap\n\nimport * as d3 from 'd3';\n\nexport function colormap(trust, conti) {\n\tlet cScale = 1.3;\n\n\ttrust = 1 - trust;\n\tconti = 1 - conti;\n\t\n\tlet powScale = d3.scalePow().exponent(1.5145);\n\tlet aScale = d3.scaleLinear().domain([1, -1]).range([30 * cScale, -30 * cScale]);  //30\n\tlet bScale = d3.scaleLinear().domain([1, -1]).range([20 * cScale, -20 * cScale]);  // 20   \n\n\treturn d3.color(d3.lab(powScale(1 - (trust + conti) / 2) * 100, aScale(trust - conti), bScale(conti - trust)));\n}","import React, { useRef, useEffect, useState} from \"react\";\nimport * as d3 from \"d3\";\nimport { tnc } from \"../utils/tnc\"\nimport { colormap } from \"../utils/colormap\";\n\nconst ProjectionView = (props) =>{\n  const { attrPosition, pointData, center, circleUpdate } = props;\n  const pViewSvg = useRef(null);\n  const margin = 40;\n  const width = 600;\n  const svgSize = margin * 2 + width;\n  const isUpdate = useRef(null);\n  const [checkVis, setCheckVis] = useState(false);\n  let xExtent, yExtent, newPosition, pointPosition;\n\n  // first render & update\n  useEffect(() =>{\n    if(!isUpdate.current){\n      updateData();\n      drawPoint();\n      isUpdate.current = true;\n    }else\n    {\n      updateData();\n      updatePoint();\n      setCheckVis(false);\n    }\n  },[circleUpdate])\n\n  // checkVis render & remove\n  useEffect(() =>{\n    if(checkVis)\n    {\n      updateData();\n      drawVoronoi();\n    }\n    else\n      d3.select(\".voronoiSvg\").remove();\n  },[checkVis])\n\n  // set projection\n  function drawPoint(){\n    const svg = d3.select(pViewSvg.current);\n    const pointSvg = svg.append(\"g\")\n                        .attr(\"transform\",`translate(0,0)`)\n                        .attr(\"class\",\"pointSvg\")\n\n    updatePoint();\n  }\n\n  // update projection position by attribute position\n  function updateData()\n  {\n    newPosition = pointData.map( d =>{\n      let pointX = 0;\n      var pointY = 0;\n      d.forEach((e,i) => {\n        pointX += e * (attrPosition[i][0] - center);\n        pointY += e * (attrPosition[i][1] - center);\n      });\n      return [pointX, pointY]\n    })\n    pointPosition = newPosition;\n  }\n\n  // update projection\n  function updatePoint()\n  {\n    xExtent = d3.extent(pointPosition.map(d => d[0]));\n\t\tyExtent = d3.extent(pointPosition.map(d => d[1]));\n    const xScale  = d3.scaleLinear().domain(xExtent).range([margin, margin + width]);\n\t\tconst yScale  = d3.scaleLinear().domain(yExtent).range([margin, margin + width]);\n\n    const pointSvg = d3.select(\".pointSvg\");\n    pointSvg.selectAll(\"circle\")\n    .data(pointPosition)\n    .join(\"circle\")\n    .transition()\n    .duration(10)\n    .attr(\"cx\", d => xScale(d[0]))\n    .attr(\"cy\", d => yScale(d[1]))\n    .attr(\"r\", 3)\n    .attr(\"fill\", \"white\")\n    .attr(\"stroke\", \"black\")\n    .attr(\"class\", (d,i) => `point${i}`);\n  }\n\n  // draw voronoi graph\n  function drawVoronoi()\n  {\n    const svg = d3.select(pViewSvg.current);\n    const voronoiSvg = svg.append(\"g\")\n                          .attr(\"transform\",`translate(0,0)`)\n                          .attr(\"class\",\"voronoiSvg\");\n\n    xExtent = d3.extent(pointPosition.map(d => d[0]));\n\t\tyExtent = d3.extent(pointPosition.map(d => d[1]));\n    const xScale  = d3.scaleLinear().domain(xExtent).range([margin, margin + width]);\n\t\tconst yScale  = d3.scaleLinear().domain(yExtent).range([margin, margin + width]);\n    const delaunayPosition = pointPosition.map(e => [xScale(e[0]),yScale(e[1])]);\n    //console.log(tnc(pointData,delaunayPosition));\n    const tncValue = tnc(pointData,delaunayPosition);\n    let voronoi = d3.Delaunay\n                    .from(delaunayPosition)\n                    .voronoi([0, 0, svgSize, svgSize]);\n    voronoiSvg.append(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#ccc\")\n      .attr(\"stroke-width\", 1)\n      .attr(\"d\", voronoi.render());\n\n    voronoiSvg.append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"pointer-events\", \"all\")\n      .attr(\"class\", \"cell\")\n      .selectAll(\"path\")\n      .data(delaunayPosition)\n      .join(\"path\")\n      .attr(\"d\", (d, i) => voronoi.renderCell(i))\n      .attr(\"fill\", (_,i)=>{\n        return colormap(tncValue.trust[i],tncValue.conti[i]);\n      })\n\n    voronoiSvg.append(\"g\")\n      .selectAll(\"circle\")\n      .data(pointPosition)\n      .join(\"circle\")\n      .transition()\n      .duration(10)\n      .attr(\"cx\", d => xScale(d[0]))\n      .attr(\"cy\", d => yScale(d[1]))\n      .attr(\"r\", 3)\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"class\", (d,i) => `point${i}`);\n  }\n\n  // button handler\n  const clickHandler= () =>{\n    checkVis? setCheckVis(false) : setCheckVis(true);\n  };\n\n  return(\n    <div>\n      <div>\n      <svg ref={pViewSvg} width={svgSize} height={svgSize}/> \n      </div>\n      <div>\n      <button onClick={clickHandler}>{checkVis ? \"Disable CheckVis\" : \"Enable CheckVis\"}</button>\n      </div>\n    </div>\n  )\n\n}\n\nexport default ProjectionView;","import React, { useRef, useEffect, useState} from \"react\";\nimport * as d3 from \"d3\";\nimport { colormap } from \"../utils/colormap\";\n\nconst LegendView = (props) =>{\n  const lViewSvg = useRef(null);\n  const margin = 40;\n  const width = 200;\n  const svgSize = width + 2 * margin;\n  const num = 50;\n  const rectWidth = width / num;\n\n  useEffect(()=>{\n    const svg = d3.select(lViewSvg.current);\n\n    const xScale  = d3.scaleLinear().domain([margin, margin + width]).range([0,1]);\n\t\tconst yScale  = d3.scaleLinear().domain([margin, margin + width]).range([1,0]);\n    // set color rects\n    const rectSvg = svg.append(\"g\")\n                       .attr(\"transform\", `translate(0,0)`)\n                       .attr(\"class\",\"rectSvg\");\n    \n    for(let i = 0; i < num; i++)\n      for(let j = 0; j < num; j++ )\n      {\n        let positionX = margin + i * rectWidth;\n        let positionY = margin + j * rectWidth;\n        rectSvg.append(\"rect\")\n              .attr('x', positionX)\n              .attr('y', positionY)\n              .attr('width', rectWidth)\n              .attr('height', rectWidth)\n              .attr('stroke', 'none')\n              .attr('fill', colormap( 1-xScale(positionX), 1-yScale(positionY)));\n      }\n    // set text\n    const textSvg = svg.append(\"g\")\n                      .attr(\"transform\", `translate(0,0)`)\n                      .attr(\"class\",\"colorTextSvg\");\n    \n    textSvg.append(\"text\")\n           .attr(\"transform\",`translate(${margin + 5},${margin + 15})`)\n           .attr(\"fill\", \"white\")\n           .attr(\"font-size\", \"12px\")\n           .text(\"Missing Neighbors\");\n    textSvg.append(\"text\")\n           .attr(\"transform\",`translate(${margin + 165},${margin + 15})`)\n           .attr(\"fill\", \"white\")\n           .attr(\"font-size\", \"12px\")\n           .text(\"Both\");\n    textSvg.append(\"text\")\n           .attr(\"transform\",`translate(${margin + 5},${margin + 195})`)\n           .attr(\"fill\", \"black\")\n           .attr(\"font-size\", \"12px\")\n           .text(\"No Distortions\");\n    textSvg.append(\"text\")\n           .attr(\"transform\",`translate(${margin + 105},${margin + 195})`)\n           .attr(\"fill\", \"white\")\n           .attr(\"font-size\", \"12px\")\n           .text(\"False Neighbors\");\n  },[])\n\n  return(\n    <div>\n      <svg ref={lViewSvg} width={svgSize} height={svgSize}/> \n      </div>\n  )\n\n}\n\nexport default LegendView;","import React, {useState, useEffect} from \"react\";\nimport AxisView from \"./components/AxisView\";\nimport ProjectionView from \"./components/ProjectionView\";\nimport LegendView from \"./components/LegendView\";\nimport attr from \"./data/attr.json\";\nimport pointData from \"./data/raw.json\";\n\nimport \"./App.css\";\n\nfunction App() {\n  // AxisView Parameters\n  const radius = 150;\n  const margin = 80;\n  const width = 360;\n  const center = margin + radius;\n  // ProjectionView Update State\n  const [circleUpdate, setCircleUpdate] = useState();\n  // Axis Position\n  const [attrPosition, setAttrPosition] = useState(\n    attr.map((d,i) => {\n        let angle = Math.PI * 2 / attr.length;\n        let xPosition = center + radius * Math.cos( angle * i );\n        let yPosition = center + radius * Math.sin( angle * i) ;\n        return [xPosition, yPosition,d];\n      })\n  );\n\n  return(\n    <div className=\"Container\">\n      <div>\n        <ProjectionView\n        attrPosition = {attrPosition}\n        pointData = {pointData}\n        center = {center}\n        circleUpdate = {circleUpdate}\n        />\n      </div>\n      <div className=\"VerticalLayout\">\n        <div>\n            <AxisView\n            attrPosition = {attrPosition}\n            center = {center}\n            radius = {radius}\n            margin = {margin}\n            width = {width}\n            setCircleUpdate = {setCircleUpdate}\n            />\n        </div>\n        <div>\n          <LegendView/>\n        </div>\n      </div>\n    </div>\n  )\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}