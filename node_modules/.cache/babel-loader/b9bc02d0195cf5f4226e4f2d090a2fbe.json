{"ast":null,"code":"// Implementation of the Trustworthiness & Continuity Metric\nfunction knn(data, k) {\n  const knnArr = [];\n\n  for (let i = 0; i < data.length; i++) {\n    let knn = [];\n\n    for (let j = 0; j < data.length; j++) {\n      let dist = 0;\n\n      for (let k = 0; k < data[0].length; k++) {\n        dist += Math.pow(data[i][k] - data[j][k], 2);\n      }\n\n      knn.push([Math.sqrt(dist), j]);\n    }\n\n    knn.sort((a, b) => a[0] - b[0]);\n    knn = knn.slice(1, k + 2).map(d => d[1]);\n    knnArr.push(knn);\n  }\n\n  return knnArr;\n}\n\nexport function tnc(raw, emb) {\n  const k = 10;\n  console.log(raw, emb);\n  const kSum = Array(k).fill(0).reduce((acc, curr, i) => acc + i + 1, 0);\n  const rawKnnArr = knn(raw, k);\n  const embKnnArr = knn(emb, k);\n  const trustArr = rawKnnArr.map((rawKnn, i) => {\n    const embKnnSet = new Set(embKnnArr[i]);\n    const trust = rawKnn.reduce((acc, curr, i) => {\n      if (embKnnSet.has(curr)) return acc + (k - i);else return acc;\n    }, 0) / kSum;\n    return trust;\n  });\n  const contiArr = embKnnArr.map((embKnn, i) => {\n    const rawKnnSet = new Set(rawKnnArr[i]);\n    const conti = embKnn.reduce((acc, curr, i) => {\n      if (rawKnnSet.has(curr)) return acc + (k - i);else return acc;\n    }, 0) / kSum;\n    return conti;\n  });\n  return {\n    \"trust\": trustArr,\n    \"conti\": contiArr\n  };\n}","map":{"version":3,"sources":["/Users/yanguangjing/Desktop/infovis-assignment-3/src/utils/tnc.js"],"names":["knn","data","k","knnArr","i","length","j","dist","Math","pow","push","sqrt","sort","a","b","slice","map","d","tnc","raw","emb","console","log","kSum","Array","fill","reduce","acc","curr","rawKnnArr","embKnnArr","trustArr","rawKnn","embKnnSet","Set","trust","has","contiArr","embKnn","rawKnnSet","conti"],"mappings":"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","sourcesContent":["// Implementation of the Trustworthiness & Continuity Metric\n\nfunction knn(data, k) {\n\tconst knnArr = [];\n\tfor(let i = 0; i < data.length; i++) {\n\t\tlet knn = []\n\t\tfor(let j = 0; j < data.length; j++) {\n\t\t\tlet dist = 0;\n\t\t\tfor (let k = 0; k < data[0].length; k++) {\n\t\t\t\tdist += Math.pow((data[i][k] - data[j][k]), 2);\n\t\t\t}\n\t\t\tknn.push([Math.sqrt(dist), j]);\n\t\t}\n\t\tknn.sort((a, b) => a[0] - b[0]);\n\t\tknn = knn.slice(1, k + 2).map(d => d[1]);\n\t\tknnArr.push(knn);\n\t}\n\treturn knnArr;\n}\n\nexport function tnc(raw, emb) {\n\tconst k = 10;\n\tconsole.log(raw, emb)\n\n\tconst kSum = Array(k).fill(0).reduce((acc, curr, i) => acc + i + 1, 0);\n\n\tconst rawKnnArr = knn(raw, k);\n\tconst embKnnArr = knn(emb, k);\n\n\tconst trustArr = rawKnnArr.map((rawKnn, i) => {\n\t\tconst embKnnSet = new Set(embKnnArr[i]);\n\t\tconst trust = rawKnn.reduce((acc, curr, i) => {\n\t\t\tif (embKnnSet.has(curr)) return acc + (k - i);\n\t\t\telse return acc;\n\t\t}, 0) / kSum;\n\t\treturn trust;\n\t});\n\tconst contiArr = embKnnArr.map((embKnn, i) => {\n\t\tconst rawKnnSet = new Set(rawKnnArr[i]);\n\t\tconst conti = embKnn.reduce((acc, curr, i) => {\n\t\t\tif (rawKnnSet.has(curr)) return acc + (k - i);\n\t\t\telse return acc;\n\t\t}, 0) / kSum;\n\t\treturn conti;\n\t});\n\n\treturn {\n\t\t\"trust\": trustArr,\n\t\t\"conti\": contiArr\n\t}\n}"]},"metadata":{},"sourceType":"module"}