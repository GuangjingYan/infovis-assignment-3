{"ast":null,"code":"var _jsxFileName = \"/Users/yanguangjing/Desktop/infovis-assignment-3/src/components/ProjectionView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { tnc } from \"../utils/tnc\";\nimport { colormap } from \"../utils/colormap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProjectionView = props => {\n  _s();\n\n  const {\n    attrPosition,\n    pointData,\n    center,\n    circleUpdate\n  } = props;\n  const pViewSvg = useRef(null);\n  const margin = 40;\n  const width = 600;\n  const svgSize = margin * 2 + width;\n  const isUpdate = useRef(null);\n  const [checkVis, setCheckVis] = useState(false);\n  let xExtent, yExtent, newPosition, pointPosition; // first render & update\n\n  useEffect(() => {\n    if (!isUpdate.current) {\n      updateData();\n      drawPoint();\n      isUpdate.current = true;\n    } else {\n      updateData();\n      updatePoint();\n      setCheckVis(false);\n    }\n  }, [circleUpdate]); // checkVis render & remove\n\n  useEffect(() => {\n    if (checkVis) {\n      updateData();\n      drawVoronoi();\n    } else d3.select(\".voronoiSvg\").remove();\n  }, [checkVis]); // set projection\n\n  function drawPoint() {\n    const svg = d3.select(pViewSvg.current);\n    const pointSvg = svg.append(\"g\").attr(\"transform\", `translate(0,0)`).attr(\"class\", \"pointSvg\");\n    updatePoint();\n  } // update projection position by attribute position\n\n\n  function updateData() {\n    newPosition = pointData.map(d => {\n      let pointX = 0;\n      var pointY = 0;\n      d.forEach((e, i) => {\n        pointX += e * (attrPosition[i][0] - center);\n        pointY += e * (attrPosition[i][1] - center);\n      });\n      return [pointX, pointY];\n    });\n    pointPosition = newPosition;\n  } // update projection\n\n\n  function updatePoint() {\n    xExtent = d3.extent(pointPosition.map(d => d[0]));\n    yExtent = d3.extent(pointPosition.map(d => d[1]));\n    const xScale = d3.scaleLinear().domain(xExtent).range([margin, margin + width]);\n    const yScale = d3.scaleLinear().domain(yExtent).range([margin, margin + width]);\n    const pointSvg = d3.select(\".pointSvg\");\n    pointSvg.selectAll(\"circle\").data(pointPosition).join(\"circle\").transition().duration(10).attr(\"cx\", d => xScale(d[0])).attr(\"cy\", d => yScale(d[1])).attr(\"r\", 3).attr(\"fill\", \"white\").attr(\"stroke\", \"black\").attr(\"class\", (d, i) => `point${i}`);\n  } // draw voronoi graph\n\n\n  function drawVoronoi() {\n    const svg = d3.select(pViewSvg.current);\n    const voronoiSvg = svg.append(\"g\").attr(\"transform\", `translate(0,0)`).attr(\"class\", \"voronoiSvg\");\n    xExtent = d3.extent(pointPosition.map(d => d[0]));\n    yExtent = d3.extent(pointPosition.map(d => d[1]));\n    const xScale = d3.scaleLinear().domain(xExtent).range([margin, margin + width]);\n    const yScale = d3.scaleLinear().domain(yExtent).range([margin, margin + width]);\n    const delaunayPosition = pointPosition.map(e => [xScale(e[0]), yScale(e[1])]); //console.log(tnc(pointData,delaunayPosition));\n\n    const tncValue = tnc(pointData, delaunayPosition);\n    let voronoi = d3.Delaunay.from(delaunayPosition).voronoi([0, 0, svgSize, svgSize]);\n    voronoiSvg.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"#ccc\").attr(\"stroke-width\", 1).attr(\"d\", voronoi.render());\n    voronoiSvg.append(\"g\").attr(\"fill\", \"none\").attr(\"pointer-events\", \"all\").attr(\"class\", \"cell\").selectAll(\"path\").data(delaunayPosition).join(\"path\").attr(\"d\", (d, i) => voronoi.renderCell(i)).attr(\"fill\", (_, i) => {\n      return colormap(tncValue.trust[i], tncValue.conti[i]);\n    });\n    voronoiSvg.append(\"g\").selectAll(\"circle\").data(pointPosition).join(\"circle\").transition().duration(10).attr(\"cx\", d => xScale(d[0])).attr(\"cy\", d => yScale(d[1])).attr(\"r\", 3).attr(\"fill\", \"white\").attr(\"stroke\", \"black\").attr(\"class\", (d, i) => `point${i}`);\n  } // button handler\n\n\n  const clickHandler = () => {\n    checkVis ? setCheckVis(false) : setCheckVis(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: pViewSvg,\n        width: svgSize,\n        height: svgSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clickHandler,\n        children: checkVis ? \"Disable CheckVis\" : \"Enable CheckVis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProjectionView, \"sNXx3qJh8T+u7YKUST3OKu30S4E=\");\n\n_c = ProjectionView;\nexport default ProjectionView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectionView\");","map":{"version":3,"sources":["/Users/yanguangjing/Desktop/infovis-assignment-3/src/components/ProjectionView.js"],"names":["React","useRef","useEffect","useState","d3","tnc","colormap","ProjectionView","props","attrPosition","pointData","center","circleUpdate","pViewSvg","margin","width","svgSize","isUpdate","checkVis","setCheckVis","xExtent","yExtent","newPosition","pointPosition","current","updateData","drawPoint","updatePoint","drawVoronoi","select","remove","svg","pointSvg","append","attr","map","d","pointX","pointY","forEach","e","i","extent","xScale","scaleLinear","domain","range","yScale","selectAll","data","join","transition","duration","voronoiSvg","delaunayPosition","tncValue","voronoi","Delaunay","from","render","renderCell","_","trust","conti","clickHandler"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\nimport * as d3 from \"d3\";\nimport { tnc } from \"../utils/tnc\"\nimport { colormap } from \"../utils/colormap\";\n\nconst ProjectionView = (props) =>{\n  const { attrPosition, pointData, center, circleUpdate } = props;\n  const pViewSvg = useRef(null);\n  const margin = 40;\n  const width = 600;\n  const svgSize = margin * 2 + width;\n  const isUpdate = useRef(null);\n  const [checkVis, setCheckVis] = useState(false);\n  let xExtent, yExtent, newPosition, pointPosition;\n\n  // first render & update\n  useEffect(() =>{\n    if(!isUpdate.current){\n      updateData();\n      drawPoint();\n      isUpdate.current = true;\n    }else\n    {\n      updateData();\n      updatePoint();\n      setCheckVis(false);\n    }\n  },[circleUpdate])\n\n  // checkVis render & remove\n  useEffect(() =>{\n    if(checkVis)\n    {\n      updateData();\n      drawVoronoi();\n    }\n    else\n      d3.select(\".voronoiSvg\").remove();\n  },[checkVis])\n\n  // set projection\n  function drawPoint(){\n    const svg = d3.select(pViewSvg.current);\n    const pointSvg = svg.append(\"g\")\n                        .attr(\"transform\",`translate(0,0)`)\n                        .attr(\"class\",\"pointSvg\")\n\n    updatePoint();\n  }\n\n  // update projection position by attribute position\n  function updateData()\n  {\n    newPosition = pointData.map( d =>{\n      let pointX = 0;\n      var pointY = 0;\n      d.forEach((e,i) => {\n        pointX += e * (attrPosition[i][0] - center);\n        pointY += e * (attrPosition[i][1] - center);\n      });\n      return [pointX, pointY]\n    })\n    pointPosition = newPosition;\n  }\n\n  // update projection\n  function updatePoint()\n  {\n    xExtent = d3.extent(pointPosition.map(d => d[0]));\n\t\tyExtent = d3.extent(pointPosition.map(d => d[1]));\n    const xScale  = d3.scaleLinear().domain(xExtent).range([margin, margin + width]);\n\t\tconst yScale  = d3.scaleLinear().domain(yExtent).range([margin, margin + width]);\n\n    const pointSvg = d3.select(\".pointSvg\");\n    pointSvg.selectAll(\"circle\")\n    .data(pointPosition)\n    .join(\"circle\")\n    .transition()\n    .duration(10)\n    .attr(\"cx\", d => xScale(d[0]))\n    .attr(\"cy\", d => yScale(d[1]))\n    .attr(\"r\", 3)\n    .attr(\"fill\", \"white\")\n    .attr(\"stroke\", \"black\")\n    .attr(\"class\", (d,i) => `point${i}`);\n  }\n\n  // draw voronoi graph\n  function drawVoronoi()\n  {\n    const svg = d3.select(pViewSvg.current);\n    const voronoiSvg = svg.append(\"g\")\n                          .attr(\"transform\",`translate(0,0)`)\n                          .attr(\"class\",\"voronoiSvg\");\n\n    xExtent = d3.extent(pointPosition.map(d => d[0]));\n\t\tyExtent = d3.extent(pointPosition.map(d => d[1]));\n    const xScale  = d3.scaleLinear().domain(xExtent).range([margin, margin + width]);\n\t\tconst yScale  = d3.scaleLinear().domain(yExtent).range([margin, margin + width]);\n    const delaunayPosition = pointPosition.map(e => [xScale(e[0]),yScale(e[1])]);\n    //console.log(tnc(pointData,delaunayPosition));\n    const tncValue = tnc(pointData,delaunayPosition);\n    let voronoi = d3.Delaunay\n                    .from(delaunayPosition)\n                    .voronoi([0, 0, svgSize, svgSize]);\n    voronoiSvg.append(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#ccc\")\n      .attr(\"stroke-width\", 1)\n      .attr(\"d\", voronoi.render());\n\n    voronoiSvg.append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"pointer-events\", \"all\")\n      .attr(\"class\", \"cell\")\n      .selectAll(\"path\")\n      .data(delaunayPosition)\n      .join(\"path\")\n      .attr(\"d\", (d, i) => voronoi.renderCell(i))\n      .attr(\"fill\", (_,i)=>{\n        return colormap(tncValue.trust[i],tncValue.conti[i]);\n      })\n\n    voronoiSvg.append(\"g\")\n      .selectAll(\"circle\")\n      .data(pointPosition)\n      .join(\"circle\")\n      .transition()\n      .duration(10)\n      .attr(\"cx\", d => xScale(d[0]))\n      .attr(\"cy\", d => yScale(d[1]))\n      .attr(\"r\", 3)\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"class\", (d,i) => `point${i}`);\n  }\n\n  // button handler\n  const clickHandler= () =>{\n    checkVis? setCheckVis(false) : setCheckVis(true);\n  };\n\n  return(\n    <div>\n      <div>\n      <svg ref={pViewSvg} width={svgSize} height={svgSize}/> \n      </div>\n      <div>\n      <button onClick={clickHandler}>{checkVis ? \"Disable CheckVis\" : \"Enable CheckVis\"}</button>\n      </div>\n    </div>\n  )\n\n}\n\nexport default ProjectionView;"]},"metadata":{},"sourceType":"module"}