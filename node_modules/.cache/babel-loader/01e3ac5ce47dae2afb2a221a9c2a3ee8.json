{"ast":null,"code":"var _jsxFileName = \"/Users/yanguangjing/Desktop/infovis-assignment-3/src/components/AxisView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AxisView = props => {\n  _s();\n\n  const {\n    attrPosition,\n    center,\n    radius,\n    margin,\n    width,\n    setCircleUpdate\n  } = props;\n  const AxisSvg = useRef(null);\n  const svgSize = margin * 2 + width;\n  let drag = d3.drag().on('drag', handleDrag).on('end', dragEnded);\n  useEffect(() => {\n    drawBigCircle();\n    drawCircle();\n    drawText();\n    drawLine();\n  }, []); // drag handler\n\n  function handleDrag(e) {\n    let name = this.getAttribute(\"class\");\n    d3.select(\".lineSvg\").select(`.${name}`).style('stroke', \"red\");\n    d3.select(\".textSvg\").select(`.${name}`).style('fill', \"red\");\n    d3.select(this).style(\"fill\", \"red\");\n    let deltaX = e.x - center;\n    let deltaY = e.y - center;\n    let tan = deltaY / deltaX;\n\n    if (deltaX >= 0) {\n      e.subject[0] = center + radius * Math.cos(Math.atan(tan));\n      e.subject[1] = center + radius * Math.sin(Math.atan(tan));\n    } else {\n      e.subject[0] = center - radius * Math.cos(Math.atan(tan));\n      e.subject[1] = center - radius * Math.sin(Math.atan(tan));\n    }\n\n    updateCircle();\n    updateText();\n    updateLine();\n    setCircleUpdate(preState => !preState);\n  } // dragend handler\n\n\n  function dragEnded(e) {\n    d3.select(this).style(\"fill\", \"black\");\n    let name = this.getAttribute(\"class\");\n    d3.select(\".lineSvg\").select(`.${name}`).style('stroke', \"black\");\n    d3.select(\".textSvg\").select(`.${name}`).style('fill', \"black\");\n  } // draw star coordinate\n\n\n  function drawBigCircle() {\n    const svg = d3.select(AxisSvg.current);\n    const arcSvg = svg.append(\"g\").attr(\"transform\", `translate(${margin + radius},${radius + margin})`).attr(\"class\", \"arcSvg\");\n    const arcGenerator = d3.arc().innerRadius(radius).outerRadius(radius).startAngle(0).endAngle(Math.PI * 2);\n    const path = arcSvg.append(\"path\").attr(\"d\", arcGenerator).attr(\"fill\", \"white\").style(\"stroke\", \"grey\").style(\"stroke-width\", \"3px\").style(\"stroke-dasharray\", \"5,5\");\n  } // draw axis handle\n\n\n  function drawCircle() {\n    const svg = d3.select(AxisSvg.current); // set circles\n\n    const circleSvg = svg.append(\"g\").attr(\"transform\", `translate(0,0)`).attr(\"class\", \"circleSvg\");\n    updateCircle();\n  } // draw axis\n\n\n  function drawLine() {\n    const svg = d3.select(AxisSvg.current);\n    const lineSvg = svg.append(\"g\").attr(\"transform\", `translate(0,0)`).attr(\"class\", \"lineSvg\");\n    updateLine();\n  } // render attribute text\n\n\n  function drawText() {\n    const svg = d3.select(AxisSvg.current);\n    const textSvg = svg.append(\"g\").attr(\"transform\", `translate(0,0)`).attr(\"class\", \"textSvg\");\n    updateText();\n  } // update axis handle\n\n\n  function updateCircle() {\n    const circleSvg = d3.select(\".circleSvg\");\n    circleSvg.selectAll(\"circle\").data(attrPosition).join(\"circle\").attr(\"cx\", d => d[0]).attr(\"cy\", d => d[1]).attr(\"r\", 7).attr(\"fill\", \"black\").attr(\"class\", (d, i) => `attr${i}`).call(drag).on(\"mouseover\", function (d) {\n      d3.select(this).style(\"fill\", \"red\");\n      let name = this.getAttribute(\"class\");\n      d3.select(\".lineSvg\").select(`.${name}`).style('stroke', \"red\");\n      d3.select(\".textSvg\").select(`.${name}`).style('fill', \"red\");\n    }).on(\"mouseout\", function (d) {\n      d3.select(this).style(\"fill\", \"black\");\n      let name = this.getAttribute(\"class\");\n      d3.select(\".lineSvg\").select(`.${name}`).style('stroke', \"black\");\n      d3.select(\".textSvg\").select(`.${name}`).style('fill', \"black\");\n    });\n  } // update attribute text\n\n\n  function updateText() {\n    const textSvg = d3.select(\".textSvg\");\n    textSvg.selectAll(\"text\").data(attrPosition).join(\"text\").attr(\"class\", (_, i) => `attr${i}`).attr(\"transform\", d => {\n      let textX = d[0];\n      let textY = d[1];\n      textX > center ? textX += 20 : textX -= 80;\n      textY > center ? textY += 20 : textY -= 20;\n      return `translate(${textX},${textY})`;\n    }).text(d => d[2]);\n  } // update axis\n\n\n  function updateLine() {\n    const lineSvg = d3.select(\".lineSvg\");\n    const lineData = attrPosition.map(e => {\n      return [[center, center], [e[0], e[1]]];\n    });\n    lineSvg.selectAll(\"line\").data(lineData).join(\"line\").attr(\"x1\", d => d[0][0]).attr(\"y1\", d => d[0][1]).attr(\"x2\", d => d[1][0]).attr(\"y2\", d => d[1][1]).attr(\"class\", (_, i) => `attr${i}`).attr(\"stroke\", \"black\").style(\"stroke-width\", \"1px\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: AxisSvg,\n      width: svgSize,\n      height: svgSize - margin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 3\n  }, this);\n};\n\n_s(AxisView, \"k/hYF3Bi/nRCuBtsyslr+w7Ucpc=\");\n\n_c = AxisView;\nexport default AxisView;\n\nvar _c;\n\n$RefreshReg$(_c, \"AxisView\");","map":{"version":3,"sources":["/Users/yanguangjing/Desktop/infovis-assignment-3/src/components/AxisView.js"],"names":["React","useRef","useEffect","useState","d3","AxisView","props","attrPosition","center","radius","margin","width","setCircleUpdate","AxisSvg","svgSize","drag","on","handleDrag","dragEnded","drawBigCircle","drawCircle","drawText","drawLine","e","name","getAttribute","select","style","deltaX","x","deltaY","y","tan","subject","Math","cos","atan","sin","updateCircle","updateText","updateLine","preState","svg","current","arcSvg","append","attr","arcGenerator","arc","innerRadius","outerRadius","startAngle","endAngle","PI","path","circleSvg","lineSvg","textSvg","selectAll","data","join","d","i","call","_","textX","textY","text","lineData","map"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\nimport * as d3 from \"d3\";\n\nconst AxisView = (props) =>{\n  const { attrPosition, center, radius, margin, width, setCircleUpdate } = props;\n  \n  const AxisSvg = useRef(null);\n  const svgSize = margin * 2 + width;\n  let drag = d3.drag().on('drag',handleDrag).on('end',dragEnded);\n\n  useEffect(() =>{\n    drawBigCircle();\n    drawCircle();\n    drawText();\n    drawLine();\n  },[])\n\n  // drag handler\n  function handleDrag(e){\n    let name = this.getAttribute(\"class\");\n    d3.select(\".lineSvg\").select(`.${name}`).style('stroke',\"red\");\n    d3.select(\".textSvg\").select(`.${name}`).style('fill',\"red\");\n    d3.select(this).style(\"fill\",\"red\");\n    let deltaX = e.x - center;\n    let deltaY = e.y - center;\n    let tan = deltaY / deltaX;\n    if( deltaX >= 0) {\n      e.subject[0] = center + radius * Math.cos( Math.atan(tan) );\n      e.subject[1] = center + radius * Math.sin( Math.atan(tan) );\n    }\n    else {\n      e.subject[0] = center - radius * Math.cos( Math.atan(tan) );\n      e.subject[1] = center - radius * Math.sin( Math.atan(tan) );\n    }\n    updateCircle();\n    updateText();\n    updateLine();\n    setCircleUpdate(preState => !preState);\n  }\n\n  // dragend handler\n  function dragEnded(e){\n    d3.select(this).style(\"fill\",\"black\");\n    let name = this.getAttribute(\"class\");\n    d3.select(\".lineSvg\").select(`.${name}`).style('stroke',\"black\");\n    d3.select(\".textSvg\").select(`.${name}`).style('fill',\"black\");\n  }\n  \n  // draw star coordinate\n  function drawBigCircle()\n  {\n    const svg = d3.select(AxisSvg.current);\n    const arcSvg = svg.append(\"g\")\n                      .attr(\"transform\", `translate(${margin + radius},${radius + margin})`)\n                      .attr(\"class\", \"arcSvg\")\n\n    const arcGenerator = d3.arc()\n                          .innerRadius(radius)\n                          .outerRadius(radius)\n                          .startAngle(0)\n                          .endAngle(Math.PI * 2);\n\n    const path = arcSvg.append(\"path\")\n                    .attr(\"d\", arcGenerator)\n                    .attr(\"fill\", \"white\")\n                    .style(\"stroke\", \"grey\")\n                    .style(\"stroke-width\", \"3px\")\n                    .style(\"stroke-dasharray\", \"5,5\"); \n  }\n\n  // draw axis handle\n  function drawCircle()\n  {\n    const svg = d3.select(AxisSvg.current);\n    // set circles\n    const circleSvg = svg.append(\"g\")\n                        .attr(\"transform\", `translate(0,0)`)\n                        .attr(\"class\", \"circleSvg\")\n    updateCircle();\n  }\n\n  // draw axis\n  function drawLine()\n  {\n    const svg = d3.select(AxisSvg.current);\n    const lineSvg =  svg.append(\"g\")\n                        .attr(\"transform\", `translate(0,0)`)\n                        .attr(\"class\", \"lineSvg\")\n    updateLine();\n  }\n\n  // render attribute text\n  function drawText()\n  {\n    const svg = d3.select(AxisSvg.current);\n    const textSvg = svg.append(\"g\")\n                        .attr(\"transform\", `translate(0,0)`)\n                        .attr(\"class\", \"textSvg\")\n    updateText();\n  }\n  \n  // update axis handle\n  function updateCircle()\n  {\n    const circleSvg = d3.select(\".circleSvg\")\n    circleSvg.selectAll(\"circle\")\n        .data(attrPosition)\n        .join(\"circle\")\n        .attr(\"cx\", d => d[0])\n        .attr(\"cy\", d => d[1])\n        .attr(\"r\", 7)\n        .attr(\"fill\", \"black\")\n        .attr(\"class\", (d,i) => `attr${i}`)\n        .call(drag)\n        .on(\"mouseover\", function(d){\n          d3.select(this).style(\"fill\", \"red\");\n          let name = this.getAttribute(\"class\");\n          d3.select(\".lineSvg\").select(`.${name}`).style('stroke',\"red\");\n          d3.select(\".textSvg\").select(`.${name}`).style('fill',\"red\");\n         })\n        .on(\"mouseout\", function(d){\n          d3.select(this).style(\"fill\", \"black\");\n          let name = this.getAttribute(\"class\");\n          d3.select(\".lineSvg\").select(`.${name}`).style('stroke',\"black\");\n          d3.select(\".textSvg\").select(`.${name}`).style('fill',\"black\");\n         })\n  }\n\n  // update attribute text\n  function updateText()\n  {\n    const textSvg = d3.select(\".textSvg\");\n    textSvg.selectAll(\"text\")\n    .data(attrPosition)\n    .join(\"text\")\n    .attr(\"class\", (_,i) => `attr${i}`)\n    .attr(\"transform\",(d)=>{ \n      let textX = d[0];\n      let textY = d[1];\n      textX > center ? textX +=  20 : textX -= 80;\n      textY > center ? textY +=  20 : textY -= 20;\n      return `translate(${textX},${textY})`; \n    })\n    .text(d => d[2]);\n  }\n\n  // update axis\n  function updateLine()\n  {\n    const lineSvg = d3.select(\".lineSvg\");\n\n    const lineData = attrPosition.map(e => {\n      return[[center, center],[e[0],e[1]]];\n    })\n    lineSvg.selectAll(\"line\")\n         .data(lineData)\n         .join(\"line\")\n         .attr(\"x1\",d => d[0][0])\n         .attr(\"y1\",d => d[0][1])\n         .attr(\"x2\",d => d[1][0])\n         .attr(\"y2\",d => d[1][1])\n         .attr(\"class\",(_,i) => `attr${i}`)\n         .attr(\"stroke\", \"black\")\n         .style(\"stroke-width\", \"1px\");\n  }\n\n  return (\n\t\t<div>\n\t\t\t<svg ref={AxisSvg} width={svgSize} height={svgSize - margin}> \n\t\t\t</svg>\n\t\t</div>\n\t)\n\n}\n\nexport default AxisView;"]},"metadata":{},"sourceType":"module"}