{"ast":null,"code":"import React,{useRef,useEffect,useState}from\"react\";import*as d3 from\"d3\";import{colormap}from\"../utils/colormap\";import{jsx as _jsx}from\"react/jsx-runtime\";var LegendView=function LegendView(props){var lViewSvg=useRef(null);var margin=40;var width=200;var svgSize=width+2*margin;var num=50;var rectWidth=width/num;useEffect(function(){var svg=d3.select(lViewSvg.current);var xScale=d3.scaleLinear().domain([margin,margin+width]).range([0,1]);var yScale=d3.scaleLinear().domain([margin,margin+width]).range([1,0]);// set color rects\nvar rectSvg=svg.append(\"g\").attr(\"transform\",\"translate(0,0)\").attr(\"class\",\"rectSvg\");for(var i=0;i<num;i++){for(var j=0;j<num;j++){var positionX=margin+i*rectWidth;var positionY=margin+j*rectWidth;rectSvg.append(\"rect\").attr('x',positionX).attr('y',positionY).attr('width',rectWidth).attr('height',rectWidth).attr('stroke','none').attr('fill',colormap(1-xScale(positionX),1-yScale(positionY)));}}// set text\nvar textSvg=svg.append(\"g\").attr(\"transform\",\"translate(0,0)\").attr(\"class\",\"colorTextSvg\");textSvg.append(\"text\").attr(\"transform\",\"translate(\".concat(margin+5,\",\").concat(margin+15,\")\")).attr(\"fill\",\"white\").attr(\"font-size\",\"12px\").text(\"Missing Neighbors\");textSvg.append(\"text\").attr(\"transform\",\"translate(\".concat(margin+165,\",\").concat(margin+15,\")\")).attr(\"fill\",\"white\").attr(\"font-size\",\"12px\").text(\"Both\");textSvg.append(\"text\").attr(\"transform\",\"translate(\".concat(margin+5,\",\").concat(margin+195,\")\")).attr(\"fill\",\"black\").attr(\"font-size\",\"12px\").text(\"No Distortions\");textSvg.append(\"text\").attr(\"transform\",\"translate(\".concat(margin+105,\",\").concat(margin+195,\")\")).attr(\"fill\",\"white\").attr(\"font-size\",\"12px\").text(\"False Neighbors\");},[]);return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"svg\",{ref:lViewSvg,width:svgSize,height:svgSize})});};export default LegendView;","map":{"version":3,"sources":["/Users/yanguangjing/Desktop/infovis-assignment-3/src/components/LegendView.js"],"names":["React","useRef","useEffect","useState","d3","colormap","LegendView","props","lViewSvg","margin","width","svgSize","num","rectWidth","svg","select","current","xScale","scaleLinear","domain","range","yScale","rectSvg","append","attr","i","j","positionX","positionY","textSvg","text"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\nimport * as d3 from \"d3\";\nimport { colormap } from \"../utils/colormap\";\n\nconst LegendView = (props) =>{\n  const lViewSvg = useRef(null);\n  const margin = 40;\n  const width = 200;\n  const svgSize = width + 2 * margin;\n  const num = 50;\n  const rectWidth = width / num;\n\n  useEffect(()=>{\n    const svg = d3.select(lViewSvg.current);\n\n    const xScale  = d3.scaleLinear().domain([margin, margin + width]).range([0,1]);\n\t\tconst yScale  = d3.scaleLinear().domain([margin, margin + width]).range([1,0]);\n    // set color rects\n    const rectSvg = svg.append(\"g\")\n                       .attr(\"transform\", `translate(0,0)`)\n                       .attr(\"class\",\"rectSvg\");\n    \n    for(let i = 0; i < num; i++)\n      for(let j = 0; j < num; j++ )\n      {\n        let positionX = margin + i * rectWidth;\n        let positionY = margin + j * rectWidth;\n        rectSvg.append(\"rect\")\n              .attr('x', positionX)\n              .attr('y', positionY)\n              .attr('width', rectWidth)\n              .attr('height', rectWidth)\n              .attr('stroke', 'none')\n              .attr('fill', colormap( 1-xScale(positionX), 1-yScale(positionY)));\n      }\n    // set text\n    const textSvg = svg.append(\"g\")\n                      .attr(\"transform\", `translate(0,0)`)\n                      .attr(\"class\",\"colorTextSvg\");\n    \n    textSvg.append(\"text\")\n           .attr(\"transform\",`translate(${margin + 5},${margin + 15})`)\n           .attr(\"fill\", \"white\")\n           .attr(\"font-size\", \"12px\")\n           .text(\"Missing Neighbors\");\n    textSvg.append(\"text\")\n           .attr(\"transform\",`translate(${margin + 165},${margin + 15})`)\n           .attr(\"fill\", \"white\")\n           .attr(\"font-size\", \"12px\")\n           .text(\"Both\");\n    textSvg.append(\"text\")\n           .attr(\"transform\",`translate(${margin + 5},${margin + 195})`)\n           .attr(\"fill\", \"black\")\n           .attr(\"font-size\", \"12px\")\n           .text(\"No Distortions\");\n    textSvg.append(\"text\")\n           .attr(\"transform\",`translate(${margin + 105},${margin + 195})`)\n           .attr(\"fill\", \"white\")\n           .attr(\"font-size\", \"12px\")\n           .text(\"False Neighbors\");\n  },[])\n\n  return(\n    <div>\n      <svg ref={lViewSvg} width={svgSize} height={svgSize}/> \n      </div>\n  )\n\n}\n\nexport default LegendView;"]},"metadata":{},"sourceType":"module"}